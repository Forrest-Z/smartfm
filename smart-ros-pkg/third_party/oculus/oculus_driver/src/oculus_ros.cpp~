#include <oculus_driver/oculus_ros.h>
#include <oculus_driver/util.h>
#include <oculus_msgs/HMDInfo.h>

using namespace std;

namespace oculus_driver {

OculusRos::OculusRos(ros::NodeHandle& node)
  : is_info_loaded_(false)
  , parent_frame_("parent")
  , oculus_frame_("oculus")
  , node_(node) {
    first_yaw_ = true;
}

bool OculusRos::init() {
  OVR::System::Init();
  ros::NodeHandle private_node("~");
  private_node.getParam("parent_frame", parent_frame_);
  private_node.getParam("oculus_frame", oculus_frame_);

  manager_ = *OVR::DeviceManager::Create();
  hmd_ = *manager_->EnumerateDevices<OVR::HMDDevice>().CreateDevice();
  if (hmd_) {
    is_info_loaded_ = hmd_->GetDeviceInfo(&info_);
    sensor_ = *hmd_->GetSensor();
    hmd_pub_ = node_.advertise<oculus_msgs::HMDInfo>("/oculus/hmd_info", 10);
  } else {
    sensor_ = *manager_->EnumerateDevices<OVR::SensorDevice>().CreateDevice();
  }

  if (sensor_) {
    fusion_result_.AttachToSensor(sensor_);
    pub_ = node_.advertise<geometry_msgs::Quaternion>("/oculus/orientation", 10);
    pan_pub_ = node_.advertise<std_msgs::Float32>("/pan_servo_angle", 10);
    tilt_pub_ = node_.advertise<std_msgs::Float32>("/tilt_servo_angle", 10);
  }
  return is_info_loaded_ || sensor_;
}

OculusRos::~OculusRos() {
  sensor_.Clear();
  hmd_.Clear();
  manager_.Clear();
  //calling OVR system destory hung up the code
  //and causes the app failed to return to terminal
  //OVR::System::Destroy();
}

void OculusRos::publish() {
  ros::Time now = ros::Time::now();
  
  if (is_info_loaded_) {
    oculus_msgs::HMDInfo hmd_msg;
  
    convertHMDInfoToMsg(info_, hmd_msg);
    hmd_msg.header.stamp = now;
    hmd_pub_.publish(hmd_msg);
  }
  
  if (sensor_) {
    // topic
    geometry_msgs::Quaternion q_msg;
    OVR::Quatf quaternion = fusion_result_.GetPredictedOrientation();
    //crashed somewhere here. Changed to GetPredictedOrientation solved the problem
    //Not GetOrientation();
    float yaw, pitch, roll;
    quaternion.GetEulerAngles<OVR::Axis_Y, OVR::Axis_X, OVR::Axis_Z>(&yaw, &pitch, &roll);
    if(first_yaw_) {
      yaw_init_ = yaw;
      first_yaw_ =false;
    }
    yaw -= yaw_init_;
    std::cout.setf(std::ios::fixed);
    std::cout.precision(2);
    float pitch_degree = pitch/M_PI*180;
    float yaw_degree = yaw/M_PI*180;
    cout<<"Pan="<<yaw_degree<<"\t"<<"Pitch= "<<pitch_degree<<"\xd"<<flush;
    
    std_msgs::Float32 yaw_msg, pitch_msg;
    yaw_msg.data = yaw_degree;
    pitch_msg.data = pitch_degree;
    pan_pub_.publish(yaw_msg);
    tilt_pub_.publish(pitch_msg);
    convertYPRToMsg(-yaw, pitch, roll, q_msg);
    pub_.publish(q_msg);
    // tf
    tf::Transform transform;
    transform.setRotation(tf::Quaternion(q_msg.x,
					 q_msg.y,
					 q_msg.z,
					 q_msg.w));
    br_.sendTransform(tf::StampedTransform(transform,
					   now,
					   parent_frame_,
					   oculus_frame_));
  }
}

} 	// namespace oculus_driver
