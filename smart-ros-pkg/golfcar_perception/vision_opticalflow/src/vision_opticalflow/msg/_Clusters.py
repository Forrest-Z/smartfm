"""autogenerated by genpy from vision_opticalflow/Clusters.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import vision_opticalflow.msg
import geometry_msgs.msg
import std_msgs.msg

class Clusters(genpy.Message):
  _md5sum = "2776242fc5f734d3164b0e1985b759ad"
  _type = "vision_opticalflow/Clusters"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
vision_opticalflow/Cluster[] clusters_info

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: vision_opticalflow/Cluster
uint32 id
geometry_msgs/Point     centroid
geometry_msgs/Point     centroid_vel
int16                   centroid_dir
geometry_msgs/Point[]   members
geometry_msgs/Point[]   members_vel
#Add more later by Poon
float64                 centroid_speed_mag      #magnitude of centroid's speed
float64                 centroid_speed_dir      #direction of centroid's speed
float64[]               members_speed_mag       #magnitude of each member's speed
float64[]               members_speed_dir       #direction of each member's speed


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['header','clusters_info']
  _slot_types = ['std_msgs/Header','vision_opticalflow/Cluster[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,clusters_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Clusters, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.clusters_info is None:
        self.clusters_info = []
    else:
      self.header = std_msgs.msg.Header()
      self.clusters_info = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.clusters_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.clusters_info:
        buff.write(_struct_I.pack(val1.id))
        _v1 = val1.centroid
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.centroid_vel
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_h.pack(val1.centroid_dir))
        length = len(val1.members)
        buff.write(_struct_I.pack(length))
        for val2 in val1.members:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.members_vel)
        buff.write(_struct_I.pack(length))
        for val2 in val1.members_vel:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.centroid_speed_mag, _x.centroid_speed_dir))
        length = len(val1.members_speed_mag)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.members_speed_mag))
        length = len(val1.members_speed_dir)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.members_speed_dir))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.clusters_info is None:
        self.clusters_info = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clusters_info = []
      for i in range(0, length):
        val1 = vision_opticalflow.msg.Cluster()
        start = end
        end += 4
        (val1.id,) = _struct_I.unpack(str[start:end])
        _v3 = val1.centroid
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v4 = val1.centroid_vel
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 2
        (val1.centroid_dir,) = _struct_h.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.members = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.members.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.members_vel = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.members_vel.append(val2)
        _x = val1
        start = end
        end += 16
        (_x.centroid_speed_mag, _x.centroid_speed_dir,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.members_speed_mag = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.members_speed_dir = struct.unpack(pattern, str[start:end])
        self.clusters_info.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.clusters_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.clusters_info:
        buff.write(_struct_I.pack(val1.id))
        _v5 = val1.centroid
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.centroid_vel
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_h.pack(val1.centroid_dir))
        length = len(val1.members)
        buff.write(_struct_I.pack(length))
        for val2 in val1.members:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.members_vel)
        buff.write(_struct_I.pack(length))
        for val2 in val1.members_vel:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.centroid_speed_mag, _x.centroid_speed_dir))
        length = len(val1.members_speed_mag)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.members_speed_mag.tostring())
        length = len(val1.members_speed_dir)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.members_speed_dir.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.clusters_info is None:
        self.clusters_info = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clusters_info = []
      for i in range(0, length):
        val1 = vision_opticalflow.msg.Cluster()
        start = end
        end += 4
        (val1.id,) = _struct_I.unpack(str[start:end])
        _v7 = val1.centroid
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.centroid_vel
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 2
        (val1.centroid_dir,) = _struct_h.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.members = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.members.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.members_vel = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.members_vel.append(val2)
        _x = val1
        start = end
        end += 16
        (_x.centroid_speed_mag, _x.centroid_speed_dir,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.members_speed_mag = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.members_speed_dir = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.clusters_info.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h = struct.Struct("<h")
_struct_3I = struct.Struct("<3I")
_struct_2d = struct.Struct("<2d")
_struct_3d = struct.Struct("<3d")
