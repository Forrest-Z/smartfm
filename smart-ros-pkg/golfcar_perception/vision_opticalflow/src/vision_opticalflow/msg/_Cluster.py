"""autogenerated by genpy from vision_opticalflow/Cluster.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Cluster(genpy.Message):
  _md5sum = "bf3b6cfcb99a5fd463e2bb3f23d891c5"
  _type = "vision_opticalflow/Cluster"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 id
geometry_msgs/Point     centroid
geometry_msgs/Point     centroid_vel
int16                   centroid_dir
geometry_msgs/Point[]   members
geometry_msgs/Point[]   members_vel

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['id','centroid','centroid_vel','centroid_dir','members','members_vel']
  _slot_types = ['uint32','geometry_msgs/Point','geometry_msgs/Point','int16','geometry_msgs/Point[]','geometry_msgs/Point[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,centroid,centroid_vel,centroid_dir,members,members_vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Cluster, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Point()
      if self.centroid_vel is None:
        self.centroid_vel = geometry_msgs.msg.Point()
      if self.centroid_dir is None:
        self.centroid_dir = 0
      if self.members is None:
        self.members = []
      if self.members_vel is None:
        self.members_vel = []
    else:
      self.id = 0
      self.centroid = geometry_msgs.msg.Point()
      self.centroid_vel = geometry_msgs.msg.Point()
      self.centroid_dir = 0
      self.members = []
      self.members_vel = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_I6dh.pack(_x.id, _x.centroid.x, _x.centroid.y, _x.centroid.z, _x.centroid_vel.x, _x.centroid_vel.y, _x.centroid_vel.z, _x.centroid_dir))
      length = len(self.members)
      buff.write(_struct_I.pack(length))
      for val1 in self.members:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.members_vel)
      buff.write(_struct_I.pack(length))
      for val1 in self.members_vel:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Point()
      if self.centroid_vel is None:
        self.centroid_vel = geometry_msgs.msg.Point()
      if self.members is None:
        self.members = None
      if self.members_vel is None:
        self.members_vel = None
      end = 0
      _x = self
      start = end
      end += 54
      (_x.id, _x.centroid.x, _x.centroid.y, _x.centroid.z, _x.centroid_vel.x, _x.centroid_vel.y, _x.centroid_vel.z, _x.centroid_dir,) = _struct_I6dh.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.members = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.members.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.members_vel = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.members_vel.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_I6dh.pack(_x.id, _x.centroid.x, _x.centroid.y, _x.centroid.z, _x.centroid_vel.x, _x.centroid_vel.y, _x.centroid_vel.z, _x.centroid_dir))
      length = len(self.members)
      buff.write(_struct_I.pack(length))
      for val1 in self.members:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.members_vel)
      buff.write(_struct_I.pack(length))
      for val1 in self.members_vel:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Point()
      if self.centroid_vel is None:
        self.centroid_vel = geometry_msgs.msg.Point()
      if self.members is None:
        self.members = None
      if self.members_vel is None:
        self.members_vel = None
      end = 0
      _x = self
      start = end
      end += 54
      (_x.id, _x.centroid.x, _x.centroid.y, _x.centroid.z, _x.centroid_vel.x, _x.centroid_vel.y, _x.centroid_vel.z, _x.centroid_dir,) = _struct_I6dh.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.members = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.members.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.members_vel = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.members_vel.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_I6dh = struct.Struct("<I6dh")
_struct_3d = struct.Struct("<3d")
