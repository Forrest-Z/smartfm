/*
 * Author: 	Baoxing
 * Date:	2013/May/23
 *
 * this is a class which incorporates another two classes:
 * (1) topo_extractor: to perform image thinning, extract road skeleton, and build its topology representation;
 * (2) topo_semantics: to perform semantic analysis based on road topology representation;
 *
 * inside this class, we provide several purposes;
 * (1) load binary image; binary image is needed by "topo_extractor"; currently binary image is generated by "skeletonization" in Package OGMapping; to migrate it here later;
 * (2) serve as interface with further processing;
 */

#ifndef GOLFCAR_SEMANTICS_ROAD_SEMANTICS_H
#define GOLFCAR_SEMANTICS_ROAD_SEMANTICS_H

#include <iostream>
#include <float.h>
#include <math.h>
#include <ros/ros.h>
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include "topo_extractor/datatypes.hh"
#include "topo_extractor/utils.hh"
#include "topo_extractor/TopoExtractor.h"
#include "topo_semantic/TopoSemantic.h"

using namespace std;
using namespace cv;

namespace golfcar_semantics{

    class road_semantics {

    public:
    	road_semantics(string parameter_file);
    	~road_semantics();

    	void network_semantics();
        topo_extractor *topology_extractor_;
        topo_semantic  *topo_semantic_analyzer_;

    private:
    	void parameter_init();
    	grid_type image_loading(string imagefile, double image_scale, unsigned int unknown_min, unsigned int unknown_max);

    	//parameter file to load required parameters;
        string parameter_file_;

    	//parameters for image_processing;
    	string image_file_path_;
        double image_scale_;
        unsigned int unknown_min_;
        unsigned int unknown_max_;

    	//parameters for topo_extractor;
    	double distance_min_;
    	double distance_max_;
    	bool   pruning_;

    	//parameters for topo_semantic_analyzer;
    	//to be added;

    };

};

#endif
