"""autogenerated by genpy from long_control/PID_Msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PID_Msg(genpy.Message):
  _md5sum = "7da7da52c4166a35ed80e28993284bbc"
  _type = "long_control/PID_Msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 controller_state
float32 vel_err
float32 v_filter
float32 desired_vel
float32 p_term
float32 i_term
float32 d_term
float32 table
float32 u_ctrl
float32 p_brake_term
float32 i_brake_term
float32 d_brake_term
float32 table_brake
float32 u_brake_ctrl



"""
  __slots__ = ['controller_state','vel_err','v_filter','desired_vel','p_term','i_term','d_term','table','u_ctrl','p_brake_term','i_brake_term','d_brake_term','table_brake','u_brake_ctrl']
  _slot_types = ['int8','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       controller_state,vel_err,v_filter,desired_vel,p_term,i_term,d_term,table,u_ctrl,p_brake_term,i_brake_term,d_brake_term,table_brake,u_brake_ctrl

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PID_Msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.controller_state is None:
        self.controller_state = 0
      if self.vel_err is None:
        self.vel_err = 0.
      if self.v_filter is None:
        self.v_filter = 0.
      if self.desired_vel is None:
        self.desired_vel = 0.
      if self.p_term is None:
        self.p_term = 0.
      if self.i_term is None:
        self.i_term = 0.
      if self.d_term is None:
        self.d_term = 0.
      if self.table is None:
        self.table = 0.
      if self.u_ctrl is None:
        self.u_ctrl = 0.
      if self.p_brake_term is None:
        self.p_brake_term = 0.
      if self.i_brake_term is None:
        self.i_brake_term = 0.
      if self.d_brake_term is None:
        self.d_brake_term = 0.
      if self.table_brake is None:
        self.table_brake = 0.
      if self.u_brake_ctrl is None:
        self.u_brake_ctrl = 0.
    else:
      self.controller_state = 0
      self.vel_err = 0.
      self.v_filter = 0.
      self.desired_vel = 0.
      self.p_term = 0.
      self.i_term = 0.
      self.d_term = 0.
      self.table = 0.
      self.u_ctrl = 0.
      self.p_brake_term = 0.
      self.i_brake_term = 0.
      self.d_brake_term = 0.
      self.table_brake = 0.
      self.u_brake_ctrl = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_b13f.pack(_x.controller_state, _x.vel_err, _x.v_filter, _x.desired_vel, _x.p_term, _x.i_term, _x.d_term, _x.table, _x.u_ctrl, _x.p_brake_term, _x.i_brake_term, _x.d_brake_term, _x.table_brake, _x.u_brake_ctrl))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 53
      (_x.controller_state, _x.vel_err, _x.v_filter, _x.desired_vel, _x.p_term, _x.i_term, _x.d_term, _x.table, _x.u_ctrl, _x.p_brake_term, _x.i_brake_term, _x.d_brake_term, _x.table_brake, _x.u_brake_ctrl,) = _struct_b13f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_b13f.pack(_x.controller_state, _x.vel_err, _x.v_filter, _x.desired_vel, _x.p_term, _x.i_term, _x.d_term, _x.table, _x.u_ctrl, _x.p_brake_term, _x.i_brake_term, _x.d_brake_term, _x.table_brake, _x.u_brake_ctrl))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 53
      (_x.controller_state, _x.vel_err, _x.v_filter, _x.desired_vel, _x.p_term, _x.i_term, _x.d_term, _x.table, _x.u_ctrl, _x.p_brake_term, _x.i_brake_term, _x.d_brake_term, _x.table_brake, _x.u_brake_ctrl,) = _struct_b13f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b13f = struct.Struct("<b13f")
