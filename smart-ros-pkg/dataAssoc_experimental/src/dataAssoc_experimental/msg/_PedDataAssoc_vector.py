"""autogenerated by genmsg_py from PedDataAssoc_vector.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import dataAssoc_experimental.msg

class PedDataAssoc_vector(roslib.message.Message):
  _md5sum = "6850b117cc816ae39a1de5aca147d575"
  _type = "dataAssoc_experimental/PedDataAssoc_vector"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
dataAssoc_experimental/PedDataAssoc[] ped_vector

================================================================================
MSG: dataAssoc_experimental/PedDataAssoc
int32 id        
geometry_msgs/Point32 ped_pose

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
"""
  __slots__ = ['ped_vector']
  _slot_types = ['dataAssoc_experimental/PedDataAssoc[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       ped_vector
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(PedDataAssoc_vector, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ped_vector is None:
        self.ped_vector = []
    else:
      self.ped_vector = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.ped_vector)
      buff.write(_struct_I.pack(length))
      for val1 in self.ped_vector:
        buff.write(_struct_i.pack(val1.id))
        _v1 = val1.ped_pose
        _x = _v1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ped_vector = []
      for i in range(0, length):
        val1 = dataAssoc_experimental.msg.PedDataAssoc()
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        _v2 = val1.ped_pose
        _x = _v2
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.ped_vector.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.ped_vector)
      buff.write(_struct_I.pack(length))
      for val1 in self.ped_vector:
        buff.write(_struct_i.pack(val1.id))
        _v3 = val1.ped_pose
        _x = _v3
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ped_vector = []
      for i in range(0, length):
        val1 = dataAssoc_experimental.msg.PedDataAssoc()
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        _v4 = val1.ped_pose
        _x = _v4
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.ped_vector.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i = struct.Struct("<i")
_struct_3f = struct.Struct("<3f")
